{"ast":null,"code":"/**\n * @file postscribe\n * @description Asynchronously write javascript, even with document.write.\n * @version v2.0.8\n * @see {@link https://krux.github.io/postscribe}\n * @license MIT\n * @author Derek Brans\n * @copyright 2016 Krux Digital, Inc\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"postscribe\"] = factory();else root[\"postscribe\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var _postscribe = __webpack_require__(1);\n\n      var _postscribe2 = _interopRequireDefault(_postscribe);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      module.exports = _postscribe2['default'];\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      exports['default'] = postscribe;\n\n      var _writeStream = __webpack_require__(2);\n\n      var _writeStream2 = _interopRequireDefault(_writeStream);\n\n      var _utils = __webpack_require__(4);\n\n      var utils = _interopRequireWildcard(_utils);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n      /**\n       * A function that intentionally does nothing.\n       */\n\n\n      function doNothing() {}\n      /**\n       * Available options and defaults.\n       *\n       * @type {Object}\n       */\n\n\n      var OPTIONS = {\n        /**\n         * Called when an async script has loaded.\n         */\n        afterAsync: doNothing,\n\n        /**\n         * Called immediately before removing from the write queue.\n         */\n        afterDequeue: doNothing,\n\n        /**\n         * Called sync after a stream's first thread release.\n         */\n        afterStreamStart: doNothing,\n\n        /**\n         * Called after writing buffered document.write calls.\n         */\n        afterWrite: doNothing,\n\n        /**\n         * Allows disabling the autoFix feature of prescribe\n         */\n        autoFix: true,\n\n        /**\n         * Called immediately before adding to the write queue.\n         */\n        beforeEnqueue: doNothing,\n\n        /**\n         * Called before writing a token.\n         *\n         * @param {Object} tok The token\n         */\n        beforeWriteToken: function beforeWriteToken(tok) {\n          return tok;\n        },\n\n        /**\n         * Called before writing buffered document.write calls.\n         *\n         * @param {String} str The string\n         */\n        beforeWrite: function beforeWrite(str) {\n          return str;\n        },\n\n        /**\n         * Called when evaluation is finished.\n         */\n        done: doNothing,\n\n        /**\n         * Called when a write results in an error.\n         *\n         * @param {Error} e The error\n         */\n        error: function error(e) {\n          throw new Error(e.msg);\n        },\n\n        /**\n         * Whether to let scripts w/ async attribute set fall out of the queue.\n         */\n        releaseAsync: false\n      };\n      var nextId = 0;\n      var queue = [];\n      var active = null;\n\n      function nextStream() {\n        var args = queue.shift();\n\n        if (args) {\n          var options = utils.last(args);\n          options.afterDequeue();\n          args.stream = runStream.apply(undefined, args);\n          options.afterStreamStart();\n        }\n      }\n\n      function runStream(el, html, options) {\n        active = new _writeStream2['default'](el, options); // Identify this stream.\n\n        active.id = nextId++;\n        active.name = options.name || active.id;\n        postscribe.streams[active.name] = active; // Override document.write.\n\n        var doc = el.ownerDocument;\n        var stash = {\n          close: doc.close,\n          open: doc.open,\n          write: doc.write,\n          writeln: doc.writeln\n        };\n\n        function _write(str) {\n          str = options.beforeWrite(str);\n          active.write(str);\n          options.afterWrite(str);\n        }\n\n        _extends(doc, {\n          close: doNothing,\n          open: doNothing,\n          write: function write() {\n            for (var _len = arguments.length, str = Array(_len), _key = 0; _key < _len; _key++) {\n              str[_key] = arguments[_key];\n            }\n\n            return _write(str.join(''));\n          },\n          writeln: function writeln() {\n            for (var _len2 = arguments.length, str = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              str[_key2] = arguments[_key2];\n            }\n\n            return _write(str.join('') + '\\n');\n          }\n        }); // Override window.onerror\n\n\n        var oldOnError = active.win.onerror || doNothing; // This works together with the try/catch around WriteStream::insertScript\n        // In modern browsers, exceptions in tag scripts go directly to top level\n\n        active.win.onerror = function (msg, url, line) {\n          options.error({\n            msg: msg + ' - ' + url + ': ' + line\n          });\n          oldOnError.apply(active.win, [msg, url, line]);\n        }; // Write to the stream\n\n\n        active.write(html, function () {\n          // restore document.write\n          _extends(doc, stash); // restore window.onerror\n\n\n          active.win.onerror = oldOnError;\n          options.done();\n          active = null;\n          nextStream();\n        });\n        return active;\n      }\n\n      function postscribe(el, html, options) {\n        if (utils.isFunction(options)) {\n          options = {\n            done: options\n          };\n        } else if (options === 'clear') {\n          queue = [];\n          active = null;\n          nextId = 0;\n          return;\n        }\n\n        options = utils.defaults(options, OPTIONS); // id selector\n\n        if (/^#/.test(el)) {\n          el = window.document.getElementById(el.substr(1));\n        } else {\n          el = el.jquery ? el[0] : el;\n        }\n\n        var args = [el, html, options];\n        el.postscribe = {\n          cancel: function cancel() {\n            if (args.stream) {\n              args.stream.abort();\n            } else {\n              args[1] = doNothing;\n            }\n          }\n        };\n        options.beforeEnqueue(args);\n        queue.push(args);\n\n        if (!active) {\n          nextStream();\n        }\n\n        return el.postscribe;\n      }\n\n      _extends(postscribe, {\n        // Streams by name.\n        streams: {},\n        // Queue of streams.\n        queue: queue,\n        // Expose internal classes.\n        WriteStream: _writeStream2['default']\n      });\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n      var _prescribe = __webpack_require__(3);\n\n      var _prescribe2 = _interopRequireDefault(_prescribe);\n\n      var _utils = __webpack_require__(4);\n\n      var utils = _interopRequireWildcard(_utils);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj['default'] = obj;\n          return newObj;\n        }\n      }\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * Turn on to debug how each chunk affected the DOM.\n       * @type {boolean}\n       */\n\n\n      var DEBUG_CHUNK = false;\n      /**\n       * Prefix for data attributes on DOM elements.\n       * @type {string}\n       */\n\n      var BASEATTR = 'data-ps-';\n      /**\n       * ID for the style proxy\n       * @type {string}\n       */\n\n      var PROXY_STYLE = 'ps-style';\n      /**\n       * ID for the script proxy\n       * @type {string}\n       */\n\n      var PROXY_SCRIPT = 'ps-script';\n      /**\n       * Get data attributes\n       *\n       * @param {Object} el The DOM element.\n       * @param {String} name The attribute name.\n       * @returns {String}\n       */\n\n      function getData(el, name) {\n        var attr = BASEATTR + name;\n        var val = el.getAttribute(attr); // IE 8 returns a number if it's a number\n\n        return !utils.existy(val) ? val : String(val);\n      }\n      /**\n       * Set data attributes\n       *\n       * @param {Object} el The DOM element.\n       * @param {String} name The attribute name.\n       * @param {null|*} value The attribute value.\n       */\n\n\n      function setData(el, name) {\n        var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var attr = BASEATTR + name;\n\n        if (utils.existy(value) && value !== '') {\n          el.setAttribute(attr, value);\n        } else {\n          el.removeAttribute(attr);\n        }\n      }\n      /**\n       * Stream static html to an element, where \"static html\" denotes \"html\n       * without scripts\".\n       *\n       * This class maintains a *history of writes devoid of any attributes* or\n       * \"proxy history\".\n       *\n       * Injecting the proxy history into a temporary div has no side-effects,\n       * other than to create proxy elements for previously written elements.\n       *\n       * Given the `staticHtml` of a new write, a `tempDiv`'s innerHTML is set to\n       * `proxy_history + staticHtml`.\n       * The *structure* of `tempDiv`'s contents, (i.e., the placement of new nodes\n       * beside or inside of proxy elements), reflects the DOM structure that would\n       * have resulted if all writes had been squashed into a single write.\n       *\n       * For each descendent `node` of `tempDiv` whose parentNode is a *proxy*,\n       * `node` is appended to the corresponding *real* element within the DOM.\n       *\n       * Proxy elements are mapped to *actual* elements in the DOM by injecting a\n       * `data-id` attribute into each start tag in `staticHtml`.\n       *\n       */\n\n\n      var WriteStream = function () {\n        /**\n         * Constructor.\n         *\n         * @param {Object} root The root element\n         * @param {?Object} options The options\n         */\n        function WriteStream(root) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck(this, WriteStream);\n\n          this.root = root;\n          this.options = options;\n          this.doc = root.ownerDocument;\n          this.win = this.doc.defaultView || this.doc.parentWindow;\n          this.parser = new _prescribe2['default']('', {\n            autoFix: options.autoFix\n          }); // Actual elements by id.\n\n          this.actuals = [root]; // Embodies the \"structure\" of what's been written so far,\n          // devoid of attributes.\n\n          this.proxyHistory = ''; // Create a proxy of the root element.\n\n          this.proxyRoot = this.doc.createElement(root.nodeName);\n          this.scriptStack = [];\n          this.writeQueue = [];\n          setData(this.proxyRoot, 'proxyof', 0);\n        }\n        /**\n         * Writes the given strings.\n         *\n         * @param {...String} str The strings to write\n         */\n\n\n        WriteStream.prototype.write = function write() {\n          var _writeQueue;\n\n          (_writeQueue = this.writeQueue).push.apply(_writeQueue, arguments); // Process writes\n          // When new script gets pushed or pending this will stop\n          // because new writeQueue gets pushed\n\n\n          while (!this.deferredRemote && this.writeQueue.length) {\n            var arg = this.writeQueue.shift();\n\n            if (utils.isFunction(arg)) {\n              this._callFunction(arg);\n            } else {\n              this._writeImpl(arg);\n            }\n          }\n        };\n        /**\n         * Calls the given function.\n         *\n         * @param {Function} fn The function to call\n         * @private\n         */\n\n\n        WriteStream.prototype._callFunction = function _callFunction(fn) {\n          var tok = {\n            type: 'function',\n            value: fn.name || fn.toString()\n          };\n\n          this._onScriptStart(tok);\n\n          fn.call(this.win, this.doc);\n\n          this._onScriptDone(tok);\n        };\n        /**\n         * The write implementation\n         *\n         * @param {String} html The HTML to write.\n         * @private\n         */\n\n\n        WriteStream.prototype._writeImpl = function _writeImpl(html) {\n          this.parser.append(html);\n          var tok = void 0;\n          var script = void 0;\n          var style = void 0;\n          var tokens = []; // stop if we see a script token\n\n          while ((tok = this.parser.readToken()) && !(script = utils.isScript(tok)) && !(style = utils.isStyle(tok))) {\n            tok = this.options.beforeWriteToken(tok);\n\n            if (tok) {\n              tokens.push(tok);\n            }\n          }\n\n          if (tokens.length > 0) {\n            this._writeStaticTokens(tokens);\n          }\n\n          if (script) {\n            this._handleScriptToken(tok);\n          }\n\n          if (style) {\n            this._handleStyleToken(tok);\n          }\n        };\n        /**\n         * Write contiguous non-script tokens (a chunk)\n         *\n         * @param {Array<Object>} tokens The tokens\n         * @returns {{tokens, raw, actual, proxy}|null}\n         * @private\n         */\n\n\n        WriteStream.prototype._writeStaticTokens = function _writeStaticTokens(tokens) {\n          var chunk = this._buildChunk(tokens);\n\n          if (!chunk.actual) {\n            // e.g., no tokens, or a noscript that got ignored\n            return null;\n          }\n\n          chunk.html = this.proxyHistory + chunk.actual;\n          this.proxyHistory += chunk.proxy;\n          this.proxyRoot.innerHTML = chunk.html;\n\n          if (DEBUG_CHUNK) {\n            chunk.proxyInnerHTML = this.proxyRoot.innerHTML;\n          }\n\n          this._walkChunk();\n\n          if (DEBUG_CHUNK) {\n            chunk.actualInnerHTML = this.root.innerHTML;\n          }\n\n          return chunk;\n        };\n        /**\n         * Build a chunk.\n         *\n         * @param {Array<Object>} tokens The tokens to use.\n         * @returns {{tokens: *, raw: string, actual: string, proxy: string}}\n         * @private\n         */\n\n\n        WriteStream.prototype._buildChunk = function _buildChunk(tokens) {\n          var nextId = this.actuals.length; // The raw html of this chunk.\n\n          var raw = []; // The html to create the nodes in the tokens (with id's injected).\n\n          var actual = []; // Html that can later be used to proxy the nodes in the tokens.\n\n          var proxy = [];\n          var len = tokens.length;\n\n          for (var i = 0; i < len; i++) {\n            var tok = tokens[i];\n            var tokenRaw = tok.toString();\n            raw.push(tokenRaw);\n\n            if (tok.attrs) {\n              // tok.attrs <==> startTag or atomicTag or cursor\n              // Ignore noscript tags. They are atomic, so we don't have to worry about children.\n              if (!/^noscript$/i.test(tok.tagName)) {\n                var id = nextId++; // Actual: inject id attribute: replace '>' at end of start tag with id attribute + '>'\n\n                actual.push(tokenRaw.replace(/(\\/?>)/, ' ' + BASEATTR + 'id=' + id + ' $1')); // Don't proxy scripts: they have no bearing on DOM structure.\n\n                if (tok.attrs.id !== PROXY_SCRIPT && tok.attrs.id !== PROXY_STYLE) {\n                  // Proxy: strip all attributes and inject proxyof attribute\n                  proxy.push( // ignore atomic tags (e.g., style): they have no \"structural\" effect\n                  tok.type === 'atomicTag' ? '' : '<' + tok.tagName + ' ' + BASEATTR + 'proxyof=' + id + (tok.unary ? ' />' : '>'));\n                }\n              }\n            } else {\n              // Visit any other type of token\n              // Actual: append.\n              actual.push(tokenRaw); // Proxy: append endTags. Ignore everything else.\n\n              proxy.push(tok.type === 'endTag' ? tokenRaw : '');\n            }\n          }\n\n          return {\n            tokens: tokens,\n            raw: raw.join(''),\n            actual: actual.join(''),\n            proxy: proxy.join('')\n          };\n        };\n        /**\n         * Walk the chunks.\n         *\n         * @private\n         */\n\n\n        WriteStream.prototype._walkChunk = function _walkChunk() {\n          var node = void 0;\n          var stack = [this.proxyRoot]; // use shift/unshift so that children are walked in document order\n\n          while (utils.existy(node = stack.shift())) {\n            var isElement = node.nodeType === 1;\n            var isProxy = isElement && getData(node, 'proxyof'); // Ignore proxies\n\n            if (!isProxy) {\n              if (isElement) {\n                // New actual element: register it and remove the the id attr.\n                this.actuals[getData(node, 'id')] = node;\n                setData(node, 'id');\n              } // Is node's parent a proxy?\n\n\n              var parentIsProxyOf = node.parentNode && getData(node.parentNode, 'proxyof');\n\n              if (parentIsProxyOf) {\n                // Move node under actual parent.\n                this.actuals[parentIsProxyOf].appendChild(node);\n              }\n            } // prepend childNodes to stack\n\n\n            stack.unshift.apply(stack, utils.toArray(node.childNodes));\n          }\n        };\n        /**\n         * Handles Script tokens\n         *\n         * @param {Object} tok The token\n         */\n\n\n        WriteStream.prototype._handleScriptToken = function _handleScriptToken(tok) {\n          var _this = this;\n\n          var remainder = this.parser.clear();\n\n          if (remainder) {\n            // Write remainder immediately behind this script.\n            this.writeQueue.unshift(remainder);\n          }\n\n          tok.src = tok.attrs.src || tok.attrs.SRC;\n          tok = this.options.beforeWriteToken(tok);\n\n          if (!tok) {\n            // User has removed this token\n            return;\n          }\n\n          if (tok.src && this.scriptStack.length) {\n            // Defer this script until scriptStack is empty.\n            // Assumption 1: This script will not start executing until\n            // scriptStack is empty.\n            this.deferredRemote = tok;\n          } else {\n            this._onScriptStart(tok);\n          } // Put the script node in the DOM.\n\n\n          this._writeScriptToken(tok, function () {\n            _this._onScriptDone(tok);\n          });\n        };\n        /**\n         * Handles style tokens\n         *\n         * @param {Object} tok The token\n         */\n\n\n        WriteStream.prototype._handleStyleToken = function _handleStyleToken(tok) {\n          var remainder = this.parser.clear();\n\n          if (remainder) {\n            // Write remainder immediately behind this style.\n            this.writeQueue.unshift(remainder);\n          }\n\n          tok.type = tok.attrs.type || tok.attrs.TYPE || 'text/css';\n          tok = this.options.beforeWriteToken(tok);\n\n          if (tok) {\n            // Put the style node in the DOM.\n            this._writeStyleToken(tok);\n          }\n\n          if (remainder) {\n            this.write();\n          }\n        };\n        /**\n         * Build a style and insert it into the DOM.\n         *\n         * @param {Object} tok The token\n         */\n\n\n        WriteStream.prototype._writeStyleToken = function _writeStyleToken(tok) {\n          var el = this._buildStyle(tok);\n\n          this._insertCursor(el, PROXY_STYLE); // Set content\n\n\n          if (tok.content) {\n            if (el.styleSheet && !el.sheet) {\n              el.styleSheet.cssText = tok.content;\n            } else {\n              el.appendChild(this.doc.createTextNode(tok.content));\n            }\n          }\n        };\n        /**\n         * Build a style element from an atomic style token.\n         *\n         * @param {Object} tok The token\n         * @returns {Element}\n         */\n\n\n        WriteStream.prototype._buildStyle = function _buildStyle(tok) {\n          var el = this.doc.createElement(tok.tagName);\n          el.setAttribute('type', tok.type); // Set attributes\n\n          utils.eachKey(tok.attrs, function (name, value) {\n            el.setAttribute(name, value);\n          });\n          return el;\n        };\n        /**\n         * Append a span to the stream. That span will act as a cursor\n         * (i.e. insertion point) for the element.\n         *\n         * @param {Object} el The element\n         * @param {string} which The type of proxy element\n         */\n\n\n        WriteStream.prototype._insertCursor = function _insertCursor(el, which) {\n          this._writeImpl('<span id=\"' + which + '\"/>');\n\n          var cursor = this.doc.getElementById(which);\n\n          if (cursor) {\n            cursor.parentNode.replaceChild(el, cursor);\n          }\n        };\n        /**\n         * Called when a script is started.\n         *\n         * @param {Object} tok The token\n         * @private\n         */\n\n\n        WriteStream.prototype._onScriptStart = function _onScriptStart(tok) {\n          tok.outerWrites = this.writeQueue;\n          this.writeQueue = [];\n          this.scriptStack.unshift(tok);\n        };\n        /**\n         * Called when a script is done.\n         *\n         * @param {Object} tok The token\n         * @private\n         */\n\n\n        WriteStream.prototype._onScriptDone = function _onScriptDone(tok) {\n          // Pop script and check nesting.\n          if (tok !== this.scriptStack[0]) {\n            this.options.error({\n              msg: 'Bad script nesting or script finished twice'\n            });\n            return;\n          }\n\n          this.scriptStack.shift(); // Append outer writes to queue and process them.\n\n          this.write.apply(this, tok.outerWrites); // Check for pending remote\n          // Assumption 2: if remote_script1 writes remote_script2 then\n          // the we notice remote_script1 finishes before remote_script2 starts.\n          // I think this is equivalent to assumption 1\n\n          if (!this.scriptStack.length && this.deferredRemote) {\n            this._onScriptStart(this.deferredRemote);\n\n            this.deferredRemote = null;\n          }\n        };\n        /**\n         * Build a script and insert it into the DOM.\n         * Done is called once script has executed.\n         *\n         * @param {Object} tok The token\n         * @param {Function} done The callback when complete\n         */\n\n\n        WriteStream.prototype._writeScriptToken = function _writeScriptToken(tok, done) {\n          var el = this._buildScript(tok);\n\n          var asyncRelease = this._shouldRelease(el);\n\n          var afterAsync = this.options.afterAsync;\n\n          if (tok.src) {\n            // Fix for attribute \"SRC\" (capitalized). IE does not recognize it.\n            el.src = tok.src;\n\n            this._scriptLoadHandler(el, !asyncRelease ? function () {\n              done();\n              afterAsync();\n            } : afterAsync);\n          }\n\n          try {\n            this._insertCursor(el, PROXY_SCRIPT);\n\n            if (!el.src || asyncRelease) {\n              done();\n            }\n          } catch (e) {\n            this.options.error(e);\n            done();\n          }\n        };\n        /**\n         * Build a script element from an atomic script token.\n         *\n         * @param {Object} tok The token\n         * @returns {Element}\n         */\n\n\n        WriteStream.prototype._buildScript = function _buildScript(tok) {\n          var el = this.doc.createElement(tok.tagName); // Set attributes\n\n          utils.eachKey(tok.attrs, function (name, value) {\n            el.setAttribute(name, value);\n          }); // Set content\n\n          if (tok.content) {\n            el.text = tok.content;\n          }\n\n          return el;\n        };\n        /**\n         * Setup the script load handler on an element.\n         *\n         * @param {Object} el The element\n         * @param {Function} done The callback\n         * @private\n         */\n\n\n        WriteStream.prototype._scriptLoadHandler = function _scriptLoadHandler(el, done) {\n          function cleanup() {\n            el = el.onload = el.onreadystatechange = el.onerror = null;\n          }\n\n          var error = this.options.error;\n\n          function success() {\n            cleanup();\n\n            if (done != null) {\n              done();\n            }\n\n            done = null;\n          }\n\n          function failure(err) {\n            cleanup();\n            error(err);\n\n            if (done != null) {\n              done();\n            }\n\n            done = null;\n          }\n\n          function reattachEventListener(el, evt) {\n            var handler = el['on' + evt];\n\n            if (handler != null) {\n              el['_on' + evt] = handler;\n            }\n          }\n\n          reattachEventListener(el, 'load');\n          reattachEventListener(el, 'error');\n\n          _extends(el, {\n            onload: function onload() {\n              if (el._onload) {\n                try {\n                  el._onload.apply(this, Array.prototype.slice.call(arguments, 0));\n                } catch (err) {\n                  failure({\n                    msg: 'onload handler failed ' + err + ' @ ' + el.src\n                  });\n                }\n              }\n\n              success();\n            },\n            onerror: function onerror() {\n              if (el._onerror) {\n                try {\n                  el._onerror.apply(this, Array.prototype.slice.call(arguments, 0));\n                } catch (err) {\n                  failure({\n                    msg: 'onerror handler failed ' + err + ' @ ' + el.src\n                  });\n                  return;\n                }\n              }\n\n              failure({\n                msg: 'remote script failed ' + el.src\n              });\n            },\n            onreadystatechange: function onreadystatechange() {\n              if (/^(loaded|complete)$/.test(el.readyState)) {\n                success();\n              }\n            }\n          });\n        };\n        /**\n         * Determines whether to release.\n         *\n         * @param {Object} el The element\n         * @returns {boolean}\n         * @private\n         */\n\n\n        WriteStream.prototype._shouldRelease = function _shouldRelease(el) {\n          var isScript = /^script$/i.test(el.nodeName);\n          return !isScript || !!(this.options.releaseAsync && el.src && el.hasAttribute('async'));\n        };\n\n        return WriteStream;\n      }();\n\n      exports['default'] = WriteStream;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * @file prescribe\n       * @description Tiny, forgiving HTML parser\n       * @version vundefined\n       * @see {@link https://github.com/krux/prescribe/}\n       * @license MIT\n       * @author Derek Brans\n       * @copyright 2016 Krux Digital, Inc\n       */\n      (function webpackUniversalModuleDefinition(root, factory) {\n        if (true) module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Prescribe\"] = factory();else root[\"Prescribe\"] = factory();\n      })(this, function () {\n        return (\n          /******/\n          function (modules) {\n            // webpackBootstrap\n\n            /******/\n            // The module cache\n\n            /******/\n            var installedModules = {};\n            /******/\n            // The require function\n\n            /******/\n\n            function __webpack_require__(moduleId) {\n              /******/\n              // Check if module is in cache\n\n              /******/\n              if (installedModules[moduleId])\n                /******/\n                return installedModules[moduleId].exports;\n              /******/\n              // Create a new module (and put it into the cache)\n\n              /******/\n\n              var module = installedModules[moduleId] = {\n                /******/\n                exports: {},\n\n                /******/\n                id: moduleId,\n\n                /******/\n                loaded: false\n                /******/\n\n              };\n              /******/\n              // Execute the module function\n\n              /******/\n\n              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n              /******/\n              // Flag the module as loaded\n\n              /******/\n\n              module.loaded = true;\n              /******/\n              // Return the exports of the module\n\n              /******/\n\n              return module.exports;\n              /******/\n            }\n            /******/\n            // expose the modules object (__webpack_modules__)\n\n            /******/\n\n\n            __webpack_require__.m = modules;\n            /******/\n            // expose the module cache\n\n            /******/\n\n            __webpack_require__.c = installedModules;\n            /******/\n            // __webpack_public_path__\n\n            /******/\n\n            __webpack_require__.p = \"\";\n            /******/\n            // Load entry module and return exports\n\n            /******/\n\n            return __webpack_require__(0);\n            /******/\n          }(\n          /************************************************************************/\n\n          /******/\n          [\n          /* 0 */\n\n          /***/\n          function (module, exports, __webpack_require__) {\n            'use strict';\n\n            var _HtmlParser = __webpack_require__(1);\n\n            var _HtmlParser2 = _interopRequireDefault(_HtmlParser);\n\n            function _interopRequireDefault(obj) {\n              return obj && obj.__esModule ? obj : {\n                'default': obj\n              };\n            }\n\n            module.exports = _HtmlParser2['default'];\n            /***/\n          },\n          /* 1 */\n\n          /***/\n          function (module, exports, __webpack_require__) {\n            'use strict';\n\n            exports.__esModule = true;\n\n            var _supports = __webpack_require__(2);\n\n            var supports = _interopRequireWildcard(_supports);\n\n            var _streamReaders = __webpack_require__(3);\n\n            var streamReaders = _interopRequireWildcard(_streamReaders);\n\n            var _fixedReadTokenFactory = __webpack_require__(6);\n\n            var _fixedReadTokenFactory2 = _interopRequireDefault(_fixedReadTokenFactory);\n\n            var _utils = __webpack_require__(5);\n\n            function _interopRequireDefault(obj) {\n              return obj && obj.__esModule ? obj : {\n                'default': obj\n              };\n            }\n\n            function _interopRequireWildcard(obj) {\n              if (obj && obj.__esModule) {\n                return obj;\n              } else {\n                var newObj = {};\n\n                if (obj != null) {\n                  for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                  }\n                }\n\n                newObj['default'] = obj;\n                return newObj;\n              }\n            }\n\n            function _classCallCheck(instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            }\n            /**\n             * Detection regular expressions.\n             *\n             * Order of detection matters: detection of one can only\n             * succeed if detection of previous didn't\n            \t\t * @type {Object}\n             */\n\n\n            var detect = {\n              comment: /^<!--/,\n              endTag: /^<\\//,\n              atomicTag: /^<\\s*(script|style|noscript|iframe|textarea)[\\s\\/>]/i,\n              startTag: /^</,\n              chars: /^[^<]/\n            };\n            /**\n             * HtmlParser provides the capability to parse HTML and return tokens\n             * representing the tags and content.\n             */\n\n            var HtmlParser = function () {\n              /**\n               * Constructor.\n               *\n               * @param {string} stream The initial parse stream contents.\n               * @param {Object} options The options\n               * @param {boolean} options.autoFix Set to true to automatically fix errors\n               */\n              function HtmlParser() {\n                var _this = this;\n\n                var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n                _classCallCheck(this, HtmlParser);\n\n                this.stream = stream;\n                var fix = false;\n                var fixedTokenOptions = {};\n\n                for (var key in supports) {\n                  if (supports.hasOwnProperty(key)) {\n                    if (options.autoFix) {\n                      fixedTokenOptions[key + 'Fix'] = true; // !supports[key];\n                    }\n\n                    fix = fix || fixedTokenOptions[key + 'Fix'];\n                  }\n                }\n\n                if (fix) {\n                  this._readToken = (0, _fixedReadTokenFactory2['default'])(this, fixedTokenOptions, function () {\n                    return _this._readTokenImpl();\n                  });\n                  this._peekToken = (0, _fixedReadTokenFactory2['default'])(this, fixedTokenOptions, function () {\n                    return _this._peekTokenImpl();\n                  });\n                } else {\n                  this._readToken = this._readTokenImpl;\n                  this._peekToken = this._peekTokenImpl;\n                }\n              }\n              /**\n               * Appends the given string to the parse stream.\n               *\n               * @param {string} str The string to append\n               */\n\n\n              HtmlParser.prototype.append = function append(str) {\n                this.stream += str;\n              };\n              /**\n               * Prepends the given string to the parse stream.\n               *\n               * @param {string} str The string to prepend\n               */\n\n\n              HtmlParser.prototype.prepend = function prepend(str) {\n                this.stream = str + this.stream;\n              };\n              /**\n               * The implementation of the token reading.\n               *\n               * @private\n               * @returns {?Token}\n               */\n\n\n              HtmlParser.prototype._readTokenImpl = function _readTokenImpl() {\n                var token = this._peekTokenImpl();\n\n                if (token) {\n                  this.stream = this.stream.slice(token.length);\n                  return token;\n                }\n              };\n              /**\n               * The implementation of token peeking.\n               *\n               * @returns {?Token}\n               */\n\n\n              HtmlParser.prototype._peekTokenImpl = function _peekTokenImpl() {\n                for (var type in detect) {\n                  if (detect.hasOwnProperty(type)) {\n                    if (detect[type].test(this.stream)) {\n                      var token = streamReaders[type](this.stream);\n\n                      if (token) {\n                        if (token.type === 'startTag' && /script|style/i.test(token.tagName)) {\n                          return null;\n                        } else {\n                          token.text = this.stream.substr(0, token.length);\n                          return token;\n                        }\n                      }\n                    }\n                  }\n                }\n              };\n              /**\n               * The public token peeking interface.  Delegates to the basic token peeking\n               * or a version that performs fixups depending on the `autoFix` setting in\n               * options.\n               *\n               * @returns {object}\n               */\n\n\n              HtmlParser.prototype.peekToken = function peekToken() {\n                return this._peekToken();\n              };\n              /**\n               * The public token reading interface.  Delegates to the basic token reading\n               * or a version that performs fixups depending on the `autoFix` setting in\n               * options.\n               *\n               * @returns {object}\n               */\n\n\n              HtmlParser.prototype.readToken = function readToken() {\n                return this._readToken();\n              };\n              /**\n               * Read tokens and hand to the given handlers.\n               *\n               * @param {Object} handlers The handlers to use for the different tokens.\n               */\n\n\n              HtmlParser.prototype.readTokens = function readTokens(handlers) {\n                var tok = void 0;\n\n                while (tok = this.readToken()) {\n                  // continue until we get an explicit \"false\" return\n                  if (handlers[tok.type] && handlers[tok.type](tok) === false) {\n                    return;\n                  }\n                }\n              };\n              /**\n               * Clears the parse stream.\n               *\n               * @returns {string} The contents of the parse stream before clearing.\n               */\n\n\n              HtmlParser.prototype.clear = function clear() {\n                var rest = this.stream;\n                this.stream = '';\n                return rest;\n              };\n              /**\n               * Returns the rest of the parse stream.\n               *\n               * @returns {string} The contents of the parse stream.\n               */\n\n\n              HtmlParser.prototype.rest = function rest() {\n                return this.stream;\n              };\n\n              return HtmlParser;\n            }();\n\n            exports['default'] = HtmlParser;\n\n            HtmlParser.tokenToString = function (tok) {\n              return tok.toString();\n            };\n\n            HtmlParser.escapeAttributes = function (attrs) {\n              var escapedAttrs = {};\n\n              for (var name in attrs) {\n                if (attrs.hasOwnProperty(name)) {\n                  escapedAttrs[name] = (0, _utils.escapeQuotes)(attrs[name], null);\n                }\n              }\n\n              return escapedAttrs;\n            };\n\n            HtmlParser.supports = supports;\n\n            for (var key in supports) {\n              if (supports.hasOwnProperty(key)) {\n                HtmlParser.browserHasFlaw = HtmlParser.browserHasFlaw || !supports[key] && key;\n              }\n            }\n            /***/\n\n          },\n          /* 2 */\n\n          /***/\n          function (module, exports) {\n            'use strict';\n\n            exports.__esModule = true;\n            var tagSoup = false;\n            var selfClose = false;\n            var work = window.document.createElement('div');\n\n            try {\n              var html = '<P><I></P></I>';\n              work.innerHTML = html;\n              exports.tagSoup = tagSoup = work.innerHTML !== html;\n            } catch (e) {\n              exports.tagSoup = tagSoup = false;\n            }\n\n            try {\n              work.innerHTML = '<P><i><P></P></i></P>';\n              exports.selfClose = selfClose = work.childNodes.length === 2;\n            } catch (e) {\n              exports.selfClose = selfClose = false;\n            }\n\n            work = null;\n            exports.tagSoup = tagSoup;\n            exports.selfClose = selfClose;\n            /***/\n          },\n          /* 3 */\n\n          /***/\n          function (module, exports, __webpack_require__) {\n            'use strict';\n\n            exports.__esModule = true;\n\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n\n            exports.comment = comment;\n            exports.chars = chars;\n            exports.startTag = startTag;\n            exports.atomicTag = atomicTag;\n            exports.endTag = endTag;\n\n            var _tokens = __webpack_require__(4);\n            /**\n             * Regular Expressions for parsing tags and attributes\n             *\n             * @type {Object}\n             */\n\n\n            var REGEXES = {\n              startTag: /^<([\\-A-Za-z0-9_]+)((?:\\s+[\\w\\-]+(?:\\s*=?\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/,\n              endTag: /^<\\/([\\-A-Za-z0-9_]+)[^>]*>/,\n              attr: /(?:([\\-A-Za-z0-9_]+)\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))|(?:([\\-A-Za-z0-9_]+)(\\s|$)+)/g,\n              fillAttr: /^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noresize|noshade|nowrap|readonly|selected)$/i\n            };\n            /**\n             * Reads a comment token\n             *\n             * @param {string} stream The input stream\n             * @returns {CommentToken}\n             */\n\n            function comment(stream) {\n              var index = stream.indexOf('-->');\n\n              if (index >= 0) {\n                return new _tokens.CommentToken(stream.substr(4, index - 1), index + 3);\n              }\n            }\n            /**\n             * Reads non-tag characters.\n             *\n             * @param {string} stream The input stream\n             * @returns {CharsToken}\n             */\n\n\n            function chars(stream) {\n              var index = stream.indexOf('<');\n              return new _tokens.CharsToken(index >= 0 ? index : stream.length);\n            }\n            /**\n             * Reads start tag token.\n             *\n             * @param {string} stream The input stream\n             * @returns {StartTagToken}\n             */\n\n\n            function startTag(stream) {\n              var endTagIndex = stream.indexOf('>');\n\n              if (endTagIndex !== -1) {\n                var match = stream.match(REGEXES.startTag);\n\n                if (match) {\n                  var _ret = function () {\n                    var attrs = {};\n                    var booleanAttrs = {};\n                    var rest = match[2];\n                    match[2].replace(REGEXES.attr, function (match, name) {\n                      if (!(arguments[2] || arguments[3] || arguments[4] || arguments[5])) {\n                        attrs[name] = '';\n                      } else if (arguments[5]) {\n                        attrs[arguments[5]] = '';\n                        booleanAttrs[arguments[5]] = true;\n                      } else {\n                        attrs[name] = arguments[2] || arguments[3] || arguments[4] || REGEXES.fillAttr.test(name) && name || '';\n                      }\n\n                      rest = rest.replace(match, '');\n                    });\n                    return {\n                      v: new _tokens.StartTagToken(match[1], match[0].length, attrs, booleanAttrs, !!match[3], rest.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''))\n                    };\n                  }();\n\n                  if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n                }\n              }\n            }\n            /**\n             * Reads atomic tag token.\n             *\n             * @param {string} stream The input stream\n             * @returns {AtomicTagToken}\n             */\n\n\n            function atomicTag(stream) {\n              var start = startTag(stream);\n\n              if (start) {\n                var rest = stream.slice(start.length); // for optimization, we check first just for the end tag\n\n                if (rest.match(new RegExp('<\\/\\\\s*' + start.tagName + '\\\\s*>', 'i'))) {\n                  // capturing the content is inefficient, so we do it inside the if\n                  var match = rest.match(new RegExp('([\\\\s\\\\S]*?)<\\/\\\\s*' + start.tagName + '\\\\s*>', 'i'));\n\n                  if (match) {\n                    return new _tokens.AtomicTagToken(start.tagName, match[0].length + start.length, start.attrs, start.booleanAttrs, match[1]);\n                  }\n                }\n              }\n            }\n            /**\n             * Reads an end tag token.\n             *\n             * @param {string} stream The input stream\n             * @returns {EndTagToken}\n             */\n\n\n            function endTag(stream) {\n              var match = stream.match(REGEXES.endTag);\n\n              if (match) {\n                return new _tokens.EndTagToken(match[1], match[0].length);\n              }\n            }\n            /***/\n\n          },\n          /* 4 */\n\n          /***/\n          function (module, exports, __webpack_require__) {\n            'use strict';\n\n            exports.__esModule = true;\n            exports.EndTagToken = exports.AtomicTagToken = exports.StartTagToken = exports.TagToken = exports.CharsToken = exports.CommentToken = exports.Token = undefined;\n\n            var _utils = __webpack_require__(5);\n\n            function _classCallCheck(instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            }\n            /**\n             * Token is a base class for all token types parsed.  Note we don't actually\n             * use intheritance due to IE8's non-existent ES5 support.\n             */\n\n\n            var Token =\n            /**\n             * Constructor.\n             *\n             * @param {string} type The type of the Token.\n             * @param {Number} length The length of the Token text.\n             */\n            exports.Token = function Token(type, length) {\n              _classCallCheck(this, Token);\n\n              this.type = type;\n              this.length = length;\n              this.text = '';\n            };\n            /**\n             * CommentToken represents comment tags.\n             */\n\n\n            var CommentToken = exports.CommentToken = function () {\n              /**\n               * Constructor.\n               *\n               * @param {string} content The content of the comment\n               * @param {Number} length The length of the Token text.\n               */\n              function CommentToken(content, length) {\n                _classCallCheck(this, CommentToken);\n\n                this.type = 'comment';\n                this.length = length || (content ? content.length : 0);\n                this.text = '';\n                this.content = content;\n              }\n\n              CommentToken.prototype.toString = function toString() {\n                return '<!--' + this.content;\n              };\n\n              return CommentToken;\n            }();\n            /**\n             * CharsToken represents non-tag characters.\n             */\n\n\n            var CharsToken = exports.CharsToken = function () {\n              /**\n               * Constructor.\n               *\n               * @param {Number} length The length of the Token text.\n               */\n              function CharsToken(length) {\n                _classCallCheck(this, CharsToken);\n\n                this.type = 'chars';\n                this.length = length;\n                this.text = '';\n              }\n\n              CharsToken.prototype.toString = function toString() {\n                return this.text;\n              };\n\n              return CharsToken;\n            }();\n            /**\n             * TagToken is a base class for all tag-based Tokens.\n             */\n\n\n            var TagToken = exports.TagToken = function () {\n              /**\n               * Constructor.\n               *\n               * @param {string} type The type of the token.\n               * @param {string} tagName The tag name.\n               * @param {Number} length The length of the Token text.\n               * @param {Object} attrs The dictionary of attributes and values\n               * @param {Object} booleanAttrs If an entry has 'true' then the attribute\n               *                              is a boolean attribute\n               */\n              function TagToken(type, tagName, length, attrs, booleanAttrs) {\n                _classCallCheck(this, TagToken);\n\n                this.type = type;\n                this.length = length;\n                this.text = '';\n                this.tagName = tagName;\n                this.attrs = attrs;\n                this.booleanAttrs = booleanAttrs;\n                this.unary = false;\n                this.html5Unary = false;\n              }\n              /**\n               * Formats the given token tag.\n               *\n               * @param {TagToken} tok The TagToken to format.\n               * @param {?string} [content=null] The content of the token.\n               * @returns {string} The formatted tag.\n               */\n\n\n              TagToken.formatTag = function formatTag(tok) {\n                var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                var str = '<' + tok.tagName;\n\n                for (var key in tok.attrs) {\n                  if (tok.attrs.hasOwnProperty(key)) {\n                    str += ' ' + key;\n                    var val = tok.attrs[key];\n\n                    if (typeof tok.booleanAttrs === 'undefined' || typeof tok.booleanAttrs[key] === 'undefined') {\n                      str += '=\"' + (0, _utils.escapeQuotes)(val) + '\"';\n                    }\n                  }\n                }\n\n                if (tok.rest) {\n                  str += ' ' + tok.rest;\n                }\n\n                if (tok.unary && !tok.html5Unary) {\n                  str += '/>';\n                } else {\n                  str += '>';\n                }\n\n                if (content !== undefined && content !== null) {\n                  str += content + '</' + tok.tagName + '>';\n                }\n\n                return str;\n              };\n\n              return TagToken;\n            }();\n            /**\n             * StartTagToken represents a start token.\n             */\n\n\n            var StartTagToken = exports.StartTagToken = function () {\n              /**\n               * Constructor.\n               *\n               * @param {string} tagName The tag name.\n               * @param {Number} length The length of the Token text\n               * @param {Object} attrs The dictionary of attributes and values\n               * @param {Object} booleanAttrs If an entry has 'true' then the attribute\n               *                              is a boolean attribute\n               * @param {boolean} unary True if the tag is a unary tag\n               * @param {string} rest The rest of the content.\n               */\n              function StartTagToken(tagName, length, attrs, booleanAttrs, unary, rest) {\n                _classCallCheck(this, StartTagToken);\n\n                this.type = 'startTag';\n                this.length = length;\n                this.text = '';\n                this.tagName = tagName;\n                this.attrs = attrs;\n                this.booleanAttrs = booleanAttrs;\n                this.html5Unary = false;\n                this.unary = unary;\n                this.rest = rest;\n              }\n\n              StartTagToken.prototype.toString = function toString() {\n                return TagToken.formatTag(this);\n              };\n\n              return StartTagToken;\n            }();\n            /**\n             * AtomicTagToken represents an atomic tag.\n             */\n\n\n            var AtomicTagToken = exports.AtomicTagToken = function () {\n              /**\n               * Constructor.\n               *\n               * @param {string} tagName The name of the tag.\n               * @param {Number} length The length of the tag text.\n               * @param {Object} attrs The attributes.\n               * @param {Object} booleanAttrs If an entry has 'true' then the attribute\n               *                              is a boolean attribute\n               * @param {string} content The content of the tag.\n               */\n              function AtomicTagToken(tagName, length, attrs, booleanAttrs, content) {\n                _classCallCheck(this, AtomicTagToken);\n\n                this.type = 'atomicTag';\n                this.length = length;\n                this.text = '';\n                this.tagName = tagName;\n                this.attrs = attrs;\n                this.booleanAttrs = booleanAttrs;\n                this.unary = false;\n                this.html5Unary = false;\n                this.content = content;\n              }\n\n              AtomicTagToken.prototype.toString = function toString() {\n                return TagToken.formatTag(this, this.content);\n              };\n\n              return AtomicTagToken;\n            }();\n            /**\n             * EndTagToken represents an end tag.\n             */\n\n\n            var EndTagToken = exports.EndTagToken = function () {\n              /**\n               * Constructor.\n               *\n               * @param {string} tagName The name of the tag.\n               * @param {Number} length The length of the tag text.\n               */\n              function EndTagToken(tagName, length) {\n                _classCallCheck(this, EndTagToken);\n\n                this.type = 'endTag';\n                this.length = length;\n                this.text = '';\n                this.tagName = tagName;\n              }\n\n              EndTagToken.prototype.toString = function toString() {\n                return '</' + this.tagName + '>';\n              };\n\n              return EndTagToken;\n            }();\n            /***/\n\n          },\n          /* 5 */\n\n          /***/\n          function (module, exports) {\n            'use strict';\n\n            exports.__esModule = true;\n            exports.escapeQuotes = escapeQuotes;\n            /**\n             * Escape quotes in the given value.\n             *\n             * @param {string} value The value to escape.\n             * @param {string} [defaultValue=''] The default value to return if value is falsy.\n             * @returns {string}\n             */\n\n            function escapeQuotes(value) {\n              var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ''; // There's no lookback in JS, so /(^|[^\\\\])\"/ only matches the first of two `\"`s.\n              // Instead, just match anything before a double-quote and escape if it's not already escaped.\n\n              return !value ? defaultValue : value.replace(/([^\"]*)\"/g, function (_, prefix) {\n                return /\\\\/.test(prefix) ? prefix + '\"' : prefix + '\\\\\"';\n              });\n            }\n            /***/\n\n          },\n          /* 6 */\n\n          /***/\n          function (module, exports) {\n            'use strict';\n\n            exports.__esModule = true;\n            exports['default'] = fixedReadTokenFactory;\n            /**\n             * Empty Elements - HTML 4.01\n             *\n             * @type {RegExp}\n             */\n\n            var EMPTY = /^(AREA|BASE|BASEFONT|BR|COL|FRAME|HR|IMG|INPUT|ISINDEX|LINK|META|PARAM|EMBED)$/i;\n            /**\n             * Elements that you can intentionally leave open (and which close themselves)\n             *\n             * @type {RegExp}\n             */\n\n            var CLOSESELF = /^(COLGROUP|DD|DT|LI|OPTIONS|P|TD|TFOOT|TH|THEAD|TR)$/i;\n            /**\n             * Corrects a token.\n             *\n             * @param {Token} tok The token to correct\n             * @returns {Token} The corrected token\n             */\n\n            function correct(tok) {\n              if (tok && tok.type === 'startTag') {\n                tok.unary = EMPTY.test(tok.tagName) || tok.unary;\n                tok.html5Unary = !/\\/>$/.test(tok.text);\n              }\n\n              return tok;\n            }\n            /**\n             * Peeks at the next token in the parser.\n             *\n             * @param {HtmlParser} parser The parser\n             * @param {Function} readTokenImpl The underlying readToken implementation\n             * @returns {Token} The next token\n             */\n\n\n            function peekToken(parser, readTokenImpl) {\n              var tmp = parser.stream;\n              var tok = correct(readTokenImpl());\n              parser.stream = tmp;\n              return tok;\n            }\n            /**\n             * Closes the last token.\n             *\n             * @param {HtmlParser} parser The parser\n             * @param {Array<Token>} stack The stack\n             */\n\n\n            function closeLast(parser, stack) {\n              var tok = stack.pop(); // prepend close tag to stream.\n\n              parser.prepend('</' + tok.tagName + '>');\n            }\n            /**\n             * Create a new token stack.\n             *\n             * @returns {Array<Token>}\n             */\n\n\n            function newStack() {\n              var stack = [];\n\n              stack.last = function () {\n                return this[this.length - 1];\n              };\n\n              stack.lastTagNameEq = function (tagName) {\n                var last = this.last();\n                return last && last.tagName && last.tagName.toUpperCase() === tagName.toUpperCase();\n              };\n\n              stack.containsTagName = function (tagName) {\n                for (var i = 0, tok; tok = this[i]; i++) {\n                  if (tok.tagName === tagName) {\n                    return true;\n                  }\n                }\n\n                return false;\n              };\n\n              return stack;\n            }\n            /**\n             * Return a readToken implementation that fixes input.\n             *\n             * @param {HtmlParser} parser The parser\n             * @param {Object} options Options for fixing\n             * @param {boolean} options.tagSoupFix True to fix tag soup scenarios\n             * @param {boolean} options.selfCloseFix True to fix self-closing tags\n             * @param {Function} readTokenImpl The underlying readToken implementation\n             * @returns {Function}\n             */\n\n\n            function fixedReadTokenFactory(parser, options, readTokenImpl) {\n              var stack = newStack();\n              var handlers = {\n                startTag: function startTag(tok) {\n                  var tagName = tok.tagName;\n\n                  if (tagName.toUpperCase() === 'TR' && stack.lastTagNameEq('TABLE')) {\n                    parser.prepend('<TBODY>');\n                    prepareNextToken();\n                  } else if (options.selfCloseFix && CLOSESELF.test(tagName) && stack.containsTagName(tagName)) {\n                    if (stack.lastTagNameEq(tagName)) {\n                      closeLast(parser, stack);\n                    } else {\n                      parser.prepend('</' + tok.tagName + '>');\n                      prepareNextToken();\n                    }\n                  } else if (!tok.unary) {\n                    stack.push(tok);\n                  }\n                },\n                endTag: function endTag(tok) {\n                  var last = stack.last();\n\n                  if (last) {\n                    if (options.tagSoupFix && !stack.lastTagNameEq(tok.tagName)) {\n                      // cleanup tag soup\n                      closeLast(parser, stack);\n                    } else {\n                      stack.pop();\n                    }\n                  } else if (options.tagSoupFix) {\n                    // cleanup tag soup part 2: skip this token\n                    readTokenImpl();\n                    prepareNextToken();\n                  }\n                }\n              };\n\n              function prepareNextToken() {\n                var tok = peekToken(parser, readTokenImpl);\n\n                if (tok && handlers[tok.type]) {\n                  handlers[tok.type](tok);\n                }\n              }\n\n              return function fixedReadToken() {\n                prepareNextToken();\n                return correct(readTokenImpl());\n              };\n            }\n            /***/\n\n          }\n          /******/\n          ])\n        );\n      });\n\n      ;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      exports.existy = existy;\n      exports.isFunction = isFunction;\n      exports.each = each;\n      exports.eachKey = eachKey;\n      exports.defaults = defaults;\n      exports.toArray = toArray;\n      exports.last = last;\n      exports.isTag = isTag;\n      exports.isScript = isScript;\n      exports.isStyle = isStyle;\n      /**\n       * Determine if the thing is not undefined and not null.\n       *\n       * @param {*} thing The thing to test\n       * @returns {boolean} True if the thing is not undefined and not null.\n       */\n\n      function existy(thing) {\n        return thing !== void 0 && thing !== null;\n      }\n      /**\n       * Is this a function?\n       *\n       * @param {*} x The variable to test\n       * @returns {boolean} True if the variable is a function\n       */\n\n\n      function isFunction(x) {\n        return 'function' === typeof x;\n      }\n      /**\n       * Loop over each item in an array-like value.\n       *\n       * @param {Array<*>} arr The array to loop over\n       * @param {Function} fn The function to call\n       * @param {?Object} target The object to bind to the function\n       */\n\n\n      function each(arr, fn, target) {\n        var i = void 0;\n        var len = arr && arr.length || 0;\n\n        for (i = 0; i < len; i++) {\n          fn.call(target, arr[i], i);\n        }\n      }\n      /**\n       * Loop over each key/value pair in a hash.\n       *\n       * @param {Object} obj The object\n       * @param {Function} fn The function to call\n       * @param {?Object} target The object to bind to the function\n       */\n\n\n      function eachKey(obj, fn, target) {\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            fn.call(target, key, obj[key]);\n          }\n        }\n      }\n      /**\n       * Set default options where some option was not specified.\n       *\n       * @param {Object} options The destination\n       * @param {Object} _defaults The defaults\n       * @returns {Object}\n       */\n\n\n      function defaults(options, _defaults) {\n        options = options || {};\n        eachKey(_defaults, function (key, val) {\n          if (!existy(options[key])) {\n            options[key] = val;\n          }\n        });\n        return options;\n      }\n      /**\n       * Convert value (e.g., a NodeList) to an array.\n       *\n       * @param {*} obj The object\n       * @returns {Array<*>}\n       */\n\n\n      function toArray(obj) {\n        try {\n          return Array.prototype.slice.call(obj);\n        } catch (e) {\n          var _ret = function () {\n            var ret = [];\n            each(obj, function (val) {\n              ret.push(val);\n            });\n            return {\n              v: ret\n            };\n          }();\n\n          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n        }\n      }\n      /**\n       * Get the last item in an array\n       *\n       * @param {Array<*>} array The array\n       * @returns {*} The last item in the array\n       */\n\n\n      function last(array) {\n        return array[array.length - 1];\n      }\n      /**\n       * Test if token is a script tag.\n       *\n       * @param {Object} tok The token\n       * @param {String} tag The tag name\n       * @returns {boolean} True if the token is a script tag\n       */\n\n\n      function isTag(tok, tag) {\n        return !tok || !(tok.type === 'startTag' || tok.type === 'atomicTag') || !('tagName' in tok) ? !1 : !!~tok.tagName.toLowerCase().indexOf(tag);\n      }\n      /**\n       * Test if token is a script tag.\n       *\n       * @param {Object} tok The token\n       * @returns {boolean} True if the token is a script tag\n       */\n\n\n      function isScript(tok) {\n        return isTag(tok, 'script');\n      }\n      /**\n       * Test if token is a style tag.\n       *\n       * @param {Object} tok The token\n       * @returns {boolean} True if the token is a style tag\n       */\n\n\n      function isStyle(tok) {\n        return isTag(tok, 'style');\n      }\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}