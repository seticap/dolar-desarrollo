{"ast":null,"code":"import { authActionTypes } from \"../actions/actionTypes\";\nimport { HttpNode } from \"../../axiosInstances\";\nimport md5 from 'md5';\nexport const login = (user, password, history) => {\n  var sesion = 0;\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  const usu = localStorage.getItem(\"username\");\n  const ses = localStorage.getItem(\"sesiones\");\n  return dispatch => {\n    dispatch(authStart());\n    HttpNode.get(\"/seticap/api/users/\".concat(user, \"/\").concat(md5(password), \"/\")).then(response => {\n      if (response.data.status === 'success') {\n        if (user != usu && ses != 1) {\n          localStorage.setItem(\"token\", md5(password));\n          localStorage.setItem(\"user\", response.data.user.name);\n          localStorage.setItem(\"username\", user);\n          sesion = 1;\n          localStorage.setItem(\"sesiones\", sesion);\n          response.data.token = md5(password);\n          dispatch(authFinished({\n            token: md5(password),\n            user: response.data.user.name\n          }));\n          history.push(\"/dashboard/\");\n        } else {\n          dispatch(authError(\"Usuario ya ingreso\" + \"USUARIO:\" + response.data.user.name + \"SESION\" + ses));\n          localStorage.removeItem('sesiones');\n          dispatch(logout());\n        }\n      } else {\n        dispatch(authError(\"Usuario/Contraseña incorrectos\"));\n      }\n    });\n  };\n};\n\nconst authStart = () => {\n  return {\n    type: authActionTypes.LOGIN_START\n  };\n};\n\nconst authFinished = auth => {\n  return {\n    type: authActionTypes.LOGIN_SUCCESS,\n    payload: auth\n  };\n};\n\nconst autoLogin = () => {\n  return {\n    type: authActionTypes.LOGIN_INITIAL_CHECK\n  };\n};\n\nconst authError = error => {\n  return {\n    type: authActionTypes.LOGIN_ERROR,\n    payload: error\n  };\n};\n\nconst authCheckLogin = () => {\n  return dispatch => {\n    dispatch(autoLogin());\n    const token = localStorage.getItem(\"token\");\n    const user = localStorage.getItem(\"username\");\n    const sesion = localStorage.getItem(\"sesiones\");\n\n    if (token) {\n      HttpNode.get(\"/seticap/api/users/\".concat(user, \"/\").concat(token, \"/\")).then(({\n        data\n      }) => {\n        if (data.status === 'success') {\n          const user = localStorage.getItem(\"user\");\n          dispatch(authFinished({\n            token,\n            user\n          }));\n        } else {\n          dispatch(logout());\n        }\n      });\n    } else {\n      dispatch(logout());\n    }\n  };\n};\n\nconst logout = () => {\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  return {\n    type: authActionTypes.LOGOUT\n  };\n};\n\nexport default {\n  login: login,\n  checkLogin: authCheckLogin,\n  logout: logout\n};","map":{"version":3,"sources":["D:\\dolar_react-master\\dolar_react-master2 - scripts\\src\\store\\actions\\auth.actions.js"],"names":["authActionTypes","HttpNode","md5","login","user","password","history","sesion","localStorage","removeItem","usu","getItem","ses","dispatch","authStart","get","then","response","data","status","setItem","name","token","authFinished","push","authError","logout","type","LOGIN_START","auth","LOGIN_SUCCESS","payload","autoLogin","LOGIN_INITIAL_CHECK","error","LOGIN_ERROR","authCheckLogin","LOGOUT","checkLogin"],"mappings":"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","sourcesContent":["import { authActionTypes } from \"../actions/actionTypes\";\nimport {HttpNode } from \"../../axiosInstances\";\nimport md5 from 'md5';\n\nexport const login = (user, password, history) => {\n    var sesion = 0;\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n\n    const usu = localStorage.getItem(\"username\");\n    const ses = localStorage.getItem(\"sesiones\");\n    return dispatch => {\n        dispatch(authStart());\n        HttpNode.get(`/seticap/api/users/${user}/${md5(password)}/`)\n            .then(response => {\n                if(response.data.status === 'success'){\n\n                if (user != usu && ses != 1){\n                    localStorage.setItem(\"token\", md5(password));\n                    localStorage.setItem(\"user\", response.data.user.name);\n                    localStorage.setItem(\"username\", user);\n                    sesion = 1;\n                    localStorage.setItem(\"sesiones\", sesion);\n                    response.data.token = md5(password);\n                    dispatch(authFinished({token: md5(password), user: response.data.user.name}));\n                    history.push(\"/dashboard/\");\n                }\n                else{\n                    dispatch(authError(\"Usuario ya ingreso\" + \"USUARIO:\" + response.data.user.name + \"SESION\" + ses));\n                    localStorage.removeItem('sesiones');\n                    dispatch(logout());\n                }\n                }else{\n                    dispatch(authError(\"Usuario/Contraseña incorrectos\"));\n                }\n            });\n    };\n};\n\nconst authStart = () => {\n    return {\n        type: authActionTypes.LOGIN_START\n    };\n};\n\nconst authFinished = auth => {\n    return {\n        type: authActionTypes.LOGIN_SUCCESS,\n        payload: auth\n    };\n};\n\nconst autoLogin = () => {\n    return {\n        type: authActionTypes.LOGIN_INITIAL_CHECK\n    };\n};\n\nconst authError = error => {\n    return {\n        type: authActionTypes.LOGIN_ERROR,\n        payload: error\n    };\n};\n\nconst authCheckLogin = () => {\n    return dispatch => {\n        dispatch(autoLogin());\n        const token = localStorage.getItem(\"token\");\n        const user = localStorage.getItem(\"username\");\n        const sesion = localStorage.getItem(\"sesiones\");\n        if (token) {\n            HttpNode.get(`/seticap/api/users/${user}/${token}/`).then(({ data }) => {\n                if (data.status === 'success') {\n                    const user = localStorage.getItem(\"user\");\n                    dispatch(authFinished({ token, user }));\n                } else {\n                    dispatch(logout());\n                }\n            });\n        }else{\n            dispatch(logout());\n        }\n    };\n};\n\nconst logout = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    return {\n        type: authActionTypes.LOGOUT\n    };\n};\n\nexport default {\n    login: login,\n    checkLogin: authCheckLogin,\n    logout: logout\n};\n"]},"metadata":{},"sourceType":"module"}